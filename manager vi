#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Google Drive Document Manager with OAuth (Fixed Version)
‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ Google Drive ‡∏î‡πâ‡∏ß‡∏¢ OAuth Client Secret config
"""

import tkinter as tk
from tkinter import filedialog, messagebox
import os
from datetime import datetime
import threading
import webbrowser
import shutil
import json
import pickle

# ‡∏ó‡∏î‡∏•‡∏≠‡∏á import libraries
try:
    import qrcode
    QR_AVAILABLE = True
except ImportError:
    QR_AVAILABLE = False

try:
    from PIL import Image, ImageTk
    PIL_AVAILABLE = True
except ImportError:
    PIL_AVAILABLE = False

# Import libraries at module level
import sys
import subprocess

def install_and_import(package):
    try:
        __import__(package)
    except ImportError:
        subprocess.check_call([sys.executable, "-m", "pip", "install", package])
        __import__(package)

# Ensure all packages are installed
required_packages = [
    'google-auth-oauthlib',
    'google-api-python-client', 
    'google-auth-httplib2',
    'google-auth'
]

for package in required_packages:
    try:
        if package == 'google-auth-oauthlib':
            from google_auth_oauthlib.flow import InstalledAppFlow
        elif package == 'google-api-python-client':
            from googleapiclient.discovery import build
            from googleapiclient.http import MediaFileUpload
        elif package == 'google-auth':
            from google.auth.transport.requests import Request
    except ImportError as e:
        print(f"‚ö†Ô∏è Installing {package}...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", package])

# Import again after installation
try:
    from google_auth_oauthlib.flow import InstalledAppFlow
    from google.auth.transport.requests import Request
    from googleapiclient.discovery import build
    from googleapiclient.http import MediaFileUpload
    GOOGLE_API_AVAILABLE = True
    print("‚úÖ Google API Libraries ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
except ImportError as e:
    print(f"‚ùå Google API Import Error: {e}")
    GOOGLE_API_AVAILABLE = False

class DriveManagerOAuth:
    def __init__(self):
        """Initialize the Drive Manager with OAuth"""
        self.SCOPES = [
            'https://www.googleapis.com/auth/drive.file',
            'https://www.googleapis.com/auth/spreadsheets'
        ]
        self.DRIVE_FOLDER_ID = "1fC2V5qvSvcQasZXRhSTUQ4rxEbc0n5IX"
        self.SHEET_ID = "10UCFCd7lyuuoonphwrnyACryKojIvAICGpMbdCy3-Zs"
        
        self.drive_service = None
        self.sheets_service = None
        self.uploaded_files = []
        self.credentials_valid = False
        
        # Initialize GUI
        self.setup_gui()
        
        # Check credentials
        self.check_credentials()
    
    def check_credentials(self):
        """Check if credentials exist"""
        if not GOOGLE_API_AVAILABLE:
            self.status_label.config(text="‚ùå Google API ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", fg="red")
            return
            
        if os.path.exists('client_secrets.json'):
            self.credentials_path_var.set('client_secrets.json')
            self.status_label.config(text="‚úÖ ‡∏û‡∏ö Client Secrets - ‡∏Å‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠", fg="green")
        else:
            self.status_label.config(text="‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö client_secrets.json - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î", fg="orange")
    
    def setup_gui(self):
        """Setup the main GUI"""
        self.root = tk.Tk()
        self.root.title("üìÅ Google Drive Manager (OAuth)")
        self.root.geometry("900x700")
        self.root.configure(bg="#f5f5f5")
        
        # Create main container
        main_container = tk.Frame(self.root, bg="#f5f5f5")
        main_container.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # Title
        title_label = tk.Label(
            main_container,
            text="üìÅ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ Google Drive (OAuth)",
            font=("Arial", 16, "bold"),
            bg="#f5f5f5",
            fg="#2c3e50"
        )
        title_label.pack(pady=(0, 20))
        
        # Tab buttons
        tab_frame = tk.Frame(main_container, bg="#f5f5f5")
        tab_frame.pack(fill=tk.X, pady=(0, 20))
        
        self.setup_tab_btn = tk.Button(
            tab_frame,
            text="üîß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OAuth",
            command=self.show_setup_tab,
            bg="#3498db",
            fg="white",
            font=("Arial", 10, "bold"),
            padx=20
        )
        self.setup_tab_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        self.upload_tab_btn = tk.Button(
            tab_frame,
            text="üì§ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î",
            command=self.show_upload_tab,
            bg="#95a5a6",
            fg="white",
            font=("Arial", 10, "bold"),
            padx=20
        )
        self.upload_tab_btn.pack(side=tk.LEFT)
        
        # Content frame
        self.content_frame = tk.Frame(main_container, bg="#f5f5f5")
        self.content_frame.pack(fill=tk.BOTH, expand=True)
        
        # Create tab contents
        self.create_setup_content()
        self.create_upload_content()
        
        # Show setup tab initially
        self.show_setup_tab()
        
        # Status bar
        self.status_label = tk.Label(
            self.root,
            text="‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö...",
            font=("Arial", 10),
            bg="#f5f5f5",
            fg="#7f8c8d",
            pady=5
        )
        self.status_label.pack(side=tk.BOTTOM, fill=tk.X)
    
    def create_setup_content(self):
        """Create setup tab content"""
        self.setup_content = tk.Frame(self.content_frame, bg="#f5f5f5")
        
        # Instructions section
        inst_frame = tk.LabelFrame(
            self.setup_content,
            text="üìã ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ OAuth",
            font=("Arial", 12, "bold"),
            bg="#f5f5f5",
            padx=20,
            pady=20
        )
        inst_frame.pack(fill=tk.X, pady=(0, 20))
        
        instructions = """
üîß ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ "This app is blocked":

1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà https://console.cloud.google.com/
2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "APIs & Services" > "OAuth consent screen"
3. ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô "Test users" ‡∏Ñ‡∏•‡∏¥‡∏Å "+ ADD USERS"
4. ‡πÉ‡∏™‡πà email ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (email ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö Google Account)
5. ‡∏Ñ‡∏•‡∏¥‡∏Å "SAVE"

‡∏´‡∏£‡∏∑‡∏≠ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏à‡∏≠‡∏´‡∏ô‡πâ‡∏≤ "This app isn't verified":
- ‡∏Ñ‡∏•‡∏¥‡∏Å "Advanced" ‡∏ó‡∏µ‡πà‡∏°‡∏∏‡∏°‡∏ã‡πâ‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏á
- ‡∏Ñ‡∏•‡∏¥‡∏Å "Go to [App Name] (unsafe)"
- ‡∏Ñ‡∏•‡∏¥‡∏Å "Continue" ‡∏´‡∏£‡∏∑‡∏≠ "Allow"
        """
        
        inst_label = tk.Label(
            inst_frame,
            text=instructions.strip(),
            bg="#f5f5f5",
            fg="#34495e",
            font=("Arial", 10),
            justify=tk.LEFT
        )
        inst_label.pack(anchor=tk.W)
        
        # OAuth credentials file section
        cred_frame = tk.LabelFrame(
            self.setup_content,
            text="üîë OAuth Credentials File",
            font=("Arial", 12, "bold"),
            bg="#f5f5f5",
            padx=20,
            pady=20
        )
        cred_frame.pack(fill=tk.X, pady=(0, 20))
        
        # File selection
        file_frame = tk.Frame(cred_frame, bg="#f5f5f5")
        file_frame.pack(fill=tk.X, pady=(0, 15))
        
        tk.Label(file_frame, text="üìÑ OAuth Client Secret JSON:", bg="#f5f5f5", font=("Arial", 10, "bold")).pack(anchor=tk.W)
        
        select_frame = tk.Frame(file_frame, bg="#f5f5f5")
        select_frame.pack(fill=tk.X, pady=(5, 0))
        
        self.credentials_path_var = tk.StringVar()
        self.cred_entry = tk.Entry(
            select_frame,
            textvariable=self.credentials_path_var,
            font=("Arial", 10),
            width=50
        )
        self.cred_entry.pack(side=tk.LEFT, padx=(0, 10))
        
        browse_cred_btn = tk.Button(
            select_frame,
            text="üîç ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå",
            command=self.browse_credentials,
            bg="#2ecc71",
            fg="white",
            font=("Arial", 9)
        )
        browse_cred_btn.pack(side=tk.LEFT)
        
        # Test connection button
        self.test_cred_btn = tk.Button(
            cred_frame,
            text="‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠",
            command=self.test_credentials,
            bg="#e74c3c",
            fg="white",
            font=("Arial", 10, "bold"),
            pady=10
        )
        self.test_cred_btn.pack(pady=(10, 0))
        
        # Connection status
        self.connection_status = tk.Label(
            cred_frame,
            text="",
            bg="#f5f5f5",
            font=("Arial", 10, "bold")
        )
        self.connection_status.pack(pady=(10, 0))
        
        # Token management
        token_frame = tk.LabelFrame(
            self.setup_content,
            text="üîÑ ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Token",
            font=("Arial", 12, "bold"),
            bg="#f5f5f5",
            padx=20,
            pady=20
        )
        token_frame.pack(fill=tk.X)
        
        token_text = """
üí° ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠:
- ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå token.json ‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà
- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° Test Users ‡πÅ‡∏•‡πâ‡∏ß
- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ APIs ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß (Drive API, Sheets API)
        """
        
        token_label = tk.Label(
            token_frame,
            text=token_text.strip(),
            bg="#f5f5f5",
            fg="#34495e",
            font=("Arial", 10),
            justify=tk.LEFT
        )
        token_label.pack(anchor=tk.W)
        
        # Clear token button
        clear_token_btn = tk.Button(
            token_frame,
            text="üóëÔ∏è ‡∏•‡∏ö Token (‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠)",
            command=self.clear_token,
            bg="#f39c12",
            fg="white",
            font=("Arial", 9)
        )
        clear_token_btn.pack(pady=(10, 0))
    
    def create_upload_content(self):
        """Create upload tab content"""
        self.upload_content = tk.Frame(self.content_frame, bg="#f5f5f5")
        
        # Upload section
        upload_frame = tk.LabelFrame(
            self.upload_content,
            text="üì§ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£",
            font=("Arial", 12, "bold"),
            bg="#f5f5f5",
            padx=20,
            pady=20
        )
        upload_frame.pack(fill=tk.X, pady=(0, 20))
        
        # Folder name
        folder_frame = tk.Frame(upload_frame, bg="#f5f5f5")
        folder_frame.pack(fill=tk.X, pady=(0, 15))
        
        tk.Label(folder_frame, text="üìÅ ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå:", bg="#f5f5f5", font=("Arial", 10, "bold")).pack(anchor=tk.W)
        
        folder_input_frame = tk.Frame(folder_frame, bg="#f5f5f5")
        folder_input_frame.pack(fill=tk.X, pady=(5, 0))
        
        self.folder_entry = tk.Entry(folder_input_frame, width=30, font=("Arial", 10))
        self.folder_entry.pack(side=tk.LEFT, padx=(0, 10))
        
        check_btn = tk.Button(
            folder_input_frame,
            text="‚úì ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö",
            command=self.check_folder_name,
            bg="#3498db",
            fg="white",
            font=("Arial", 9)
        )
        check_btn.pack(side=tk.LEFT)
        
        self.folder_status = tk.Label(folder_input_frame, text="", bg="#f5f5f5")
        self.folder_status.pack(side=tk.LEFT, padx=(10, 0))
        
        # File selection
        file_frame = tk.Frame(upload_frame, bg="#f5f5f5")
        file_frame.pack(fill=tk.X, pady=(0, 15))
        
        tk.Label(file_frame, text="üìÑ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå:", bg="#f5f5f5", font=("Arial", 10, "bold")).pack(anchor=tk.W)
        
        file_input_frame = tk.Frame(file_frame, bg="#f5f5f5")
        file_input_frame.pack(fill=tk.X, pady=(5, 0))
        
        self.file_path_var = tk.StringVar()
        self.file_entry = tk.Entry(
            file_input_frame,
            textvariable=self.file_path_var,
            width=50,
            font=("Arial", 10)
        )
        self.file_entry.pack(side=tk.LEFT, padx=(0, 10))
        
        browse_btn = tk.Button(
            file_input_frame,
            text="üîç ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å",
            command=self.browse_file,
            bg="#2ecc71",
            fg="white",
            font=("Arial", 9)
        )
        browse_btn.pack(side=tk.LEFT)
        
        # Upload button
        self.upload_btn = tk.Button(
            upload_frame,
            text="üöÄ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£",
            command=self.upload_file,
            bg="#e74c3c",
            fg="white",
            font=("Arial", 12, "bold"),
            pady=10,
            state=tk.DISABLED
        )
        self.upload_btn.pack(pady=(15, 0))
        
        # Files list
        files_frame = tk.LabelFrame(
            self.upload_content,
            text="üìã ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î",
            font=("Arial", 12, "bold"),
            bg="#f5f5f5",
            padx=20,
            pady=20
        )
        files_frame.pack(fill=tk.BOTH, expand=True)
        
        # Create listbox with scrollbar
        list_frame = tk.Frame(files_frame, bg="#f5f5f5")
        list_frame.pack(fill=tk.BOTH, expand=True)
        
        scrollbar = tk.Scrollbar(list_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        self.files_listbox = tk.Listbox(
            list_frame,
            yscrollcommand=scrollbar.set,
            font=("Arial", 10),
            height=8
        )
        self.files_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.config(command=self.files_listbox.yview)
        
        # Bind double-click
        self.files_listbox.bind("<Double-Button-1>", self.on_file_double_click)
        
        # Buttons
        btn_frame = tk.Frame(files_frame, bg="#f5f5f5")
        btn_frame.pack(fill=tk.X, pady=(10, 0))
        
        refresh_btn = tk.Button(
            btn_frame,
            text="üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä",
            command=self.refresh_files,
            bg="#95a5a6",
            fg="white",
            font=("Arial", 9)
        )
        refresh_btn.pack(side=tk.LEFT)
        
        if QR_AVAILABLE:
            qr_btn = tk.Button(
                btn_frame,
                text="üì± QR Code",
                command=self.show_qr_for_selected,
                bg="#9b59b6",
                fg="white",
                font=("Arial", 9)
            )
            qr_btn.pack(side=tk.LEFT, padx=(10, 0))
    
    def show_setup_tab(self):
        """Show setup tab"""
        for widget in self.content_frame.winfo_children():
            widget.pack_forget()
        
        self.setup_content.pack(fill=tk.BOTH, expand=True)
        self.setup_tab_btn.config(bg="#3498db")
        self.upload_tab_btn.config(bg="#95a5a6")
    
    def show_upload_tab(self):
        """Show upload tab"""
        if not self.credentials_valid:
            messagebox.showwarning("‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OAuth ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            return
        
        for widget in self.content_frame.winfo_children():
            widget.pack_forget()
        
        self.upload_content.pack(fill=tk.BOTH, expand=True)
        self.setup_tab_btn.config(bg="#95a5a6")
        self.upload_tab_btn.config(bg="#3498db")
    
    def browse_credentials(self):
        """Browse for credentials file"""
        file_path = filedialog.askopenfilename(
            title="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå OAuth Client Secret JSON",
            filetypes=[
                ("JSON files", "*.json"),
                ("All files", "*.*")
            ]
        )
        
        if file_path:
            try:
                # Validate OAuth credentials file
                with open(file_path, 'r') as f:
                    cred_data = json.load(f)
                
                # Check if it's OAuth client secret
                if 'installed' in cred_data or 'web' in cred_data:
                    # Copy and rename file
                    shutil.copy2(file_path, 'credentials.json')
                    self.credentials_path_var.set('credentials.json')
                    messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå OAuth Credentials ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠")
                else:
                    messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà OAuth Client Secret JSON\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å Google Cloud Console")
                
            except Exception as e:
                messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {str(e)}")
    
    def clear_token(self):
        """Clear existing token"""
        try:
            if os.path.exists('token.json'):
                os.remove('token.json')
                messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏•‡∏ö Token ‡πÅ‡∏•‡πâ‡∏ß\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà")
            else:
                messagebox.showinfo("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Token")
        except Exception as e:
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö Token ‡πÑ‡∏î‡πâ: {str(e)}")
    
    def test_credentials(self):
        """Test OAuth credentials"""
        if not GOOGLE_API_AVAILABLE:
            self.connection_status.config(text="‚ùå Google API ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", fg="red")
            return
        
        cred_file = self.credentials_path_var.get()
        if not cred_file or not os.path.exists(cred_file):
            self.connection_status.config(text="‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Credentials", fg="red")
            return
        
        # Test in thread
        test_thread = threading.Thread(target=self._test_credentials_thread)
        test_thread.daemon = True
        test_thread.start()
        
        self.connection_status.config(text="üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö...", fg="blue")
        self.test_cred_btn.config(state=tk.DISABLED)
    
    def _test_credentials_thread(self):
        """Test credentials in background thread"""
        try:
            # Import here to ensure it's available
            from google_auth_oauthlib.flow import InstalledAppFlow
            from google.auth.transport.requests import Request
            from googleapiclient.discovery import build
            from googleapiclient.http import MediaFileUpload
            
            creds = None
            
            # Load existing token
            if os.path.exists('token.json'):
                with open('token.json', 'rb') as token:
                    creds = pickle.load(token)
            
            # If no valid credentials, get new ones
            if not creds or not creds.valid:
                if creds and creds.expired and creds.refresh_token:
                    creds.refresh(Request())
                else:
                    flow = InstalledAppFlow.from_client_secrets_file(
                        'client_secrets.json', self.SCOPES)
                    
                    # ‡πÉ‡∏ä‡πâ local server ‡∏ö‡∏ô port 8080 (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ redirect URI ‡πÉ‡∏ô Google Cloud Console)
                    print("üîë ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏° OAuth flow...")
                    print("üåê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå...")
                    print("‚ö†Ô∏è  ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° 'http://localhost:8080' ‡πÉ‡∏ô Authorized redirect URIs ‡πÉ‡∏ô Google Cloud Console")
                    creds = flow.run_local_server(port=8080, open_browser=True)
                    print("‚úÖ OAuth ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                
                # Save credentials
                with open('token.json', 'wb') as token:
                    pickle.dump(creds, token)
            
            # Test services
            drive_service = build('drive', 'v3', credentials=creds)
            sheets_service = build('sheets', 'v4', credentials=creds)
            
            # Test API call
            drive_service.files().list(pageSize=1).execute()
            
            # Success
            self.drive_service = drive_service
            self.sheets_service = sheets_service
            self.credentials_valid = True
            
            self.root.after(0, self._test_success)
            
        except Exception as e:
            error_msg = str(e)
            self.root.after(0, lambda: self._test_error(error_msg))
    
    def _test_success(self):
        """Handle successful test"""
        self.connection_status.config(text="‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", fg="green")
        self.test_cred_btn.config(state=tk.NORMAL, text="‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß", bg="#27ae60")
        self.upload_btn.config(state=tk.NORMAL)
        self.status_label.config(text="‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÑ‡∏î‡πâ", fg="green")
        
        messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Drive ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß")
    
    def _test_error(self, error_msg):
        """Handle test error"""
        self.connection_status.config(text="‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", fg="red")
        self.test_cred_btn.config(state=tk.NORMAL)
        
        error_suggestions = ""
        if "blocked" in error_msg.lower() or "unverified" in error_msg.lower():
            error_suggestions = "\n\nüí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡πÄ‡∏û‡∏¥‡πà‡∏° Test Users ‡πÉ‡∏ô OAuth Consent Screen ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≤‡∏° Warning ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å Advanced"
        
        messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ:\n{error_msg}{error_suggestions}")
    
    def check_folder_name(self):
        """Check folder name validity"""
        folder_name = self.folder_entry.get().strip()
        
        if not folder_name:
            self.folder_status.config(text="‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå", fg="red")
            return False
        
        invalid_chars = ['/', '\\', ':', '*', '?', '"', '<', '>', '|']
        if any(char in folder_name for char in invalid_chars):
            self.folder_status.config(text="‚ùå ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", fg="red")
            return False
        
        if len(folder_name) > 50:
            self.folder_status.config(text="‚ùå ‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ", fg="red")
            return False
        
        self.folder_status.config(text="‚úÖ ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", fg="green")
        return True
    
    def browse_file(self):
        """Browse for file"""
        file_path = filedialog.askopenfilename(
            title="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î",
            filetypes=[
                ("‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ Word", "*.docx *.doc"),
                ("‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ PDF", "*.pdf"),
                ("‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û", "*.jpg *.jpeg *.png *.gif"),
                ("‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ Excel", "*.xlsx *.xls"),
                ("‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "*.*")
            ]
        )
        
        if file_path:
            self.file_path_var.set(file_path)
    
    def upload_file(self):
        """Upload file to Google Drive"""
        if not self.credentials_valid or not self.drive_service:
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Google Drive")
            return
        
        if not self.check_folder_name():
            return
        
        file_path = self.file_path_var.get()
        if not file_path or not os.path.exists(file_path):
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå")
            return
        
        # Start upload in thread  
        upload_thread = threading.Thread(target=self._upload_thread, args=(file_path,))
        upload_thread.daemon = True
        upload_thread.start()
    
    def _upload_thread(self, file_path):
        """Upload file in background thread"""
        try:
            self.root.after(0, lambda: self.status_label.config(text="üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î...", fg="blue"))
            self.root.after(0, lambda: self.upload_btn.config(state=tk.DISABLED))
            
            # Create folder structure
            folder_name = self.folder_entry.get().strip()
            upload_date = datetime.now().strftime("%Y%m%d")
            sequence = len(self.uploaded_files) + 1
            subfolder_name = f"{sequence:03d}_{upload_date}_{folder_name}"
            
            # Create subfolder
            subfolder_id = self._create_folder(subfolder_name, self.DRIVE_FOLDER_ID)
            if not subfolder_id:
                raise Exception("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ")
            
            # Upload file
            file_name = os.path.basename(file_path)
            file_metadata = {
                'name': file_name,
                'parents': [subfolder_id]
            }
            
            media = MediaFileUpload(file_path, resumable=True)
            uploaded_file = self.drive_service.files().create(
                body=file_metadata,
                media_body=media,
                fields='id,name,size,webViewLink'
            ).execute()
            
            # Add to files list
            file_info = {
                'name': file_name,
                'folder': subfolder_name,
                'date': datetime.now().strftime("%Y-%m-%d %H:%M"),
                'link': uploaded_file['webViewLink'],
                'sequence': sequence
            }
            
            self.uploaded_files.append(file_info)
            
            # Update GUI
            self.root.after(0, self._upload_success, file_info)
            
        except Exception as e:
            error_msg = f"Upload failed: {str(e)}"
            self.root.after(0, lambda: messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error_msg))
            self.root.after(0, lambda: self.status_label.config(text="‚ùå ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", fg="red"))
            self.root.after(0, lambda: self.upload_btn.config(state=tk.NORMAL))
    
    def _create_folder(self, folder_name, parent_id):
        """Create folder in Google Drive"""
        try:
            folder_metadata = {
                'name': folder_name,
                'mimeType': 'application/vnd.google-apps.folder',
                'parents': [parent_id]
            }
            
            folder = self.drive_service.files().create(
                body=folder_metadata,
                fields='id'
            ).execute()
            
            return folder.get('id')
        except Exception:
            return None
    
    def _upload_success(self, file_info):
        """Handle successful upload"""
        self.status_label.config(text="‚úÖ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", fg="green")
        self.upload_btn.config(state=tk.NORMAL)
        self.refresh_files()
        
        # Clear form
        self.folder_entry.delete(0, tk.END)
        self.file_path_var.set("")
        self.folder_status.config(text="")
        
        messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î '{file_info['name']}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    
    def refresh_files(self):
        """Refresh files list"""
        self.files_listbox.delete(0, tk.END)
        
        for i, file_info in enumerate(self.uploaded_files):
            display_text = f"{i+1:2d}. {file_info['name']} | {file_info['folder']} | {file_info['date']}"
            self.files_listbox.insert(tk.END, display_text)
    
    def on_file_double_click(self, event):
        """Handle double-click on file"""
        selection = self.files_listbox.curselection()
        if not selection:
            return
        
        file_info = self.uploaded_files[selection[0]]
        webbrowser.open(file_info['link'])
    
    def show_qr_for_selected(self):
        """Show QR code for selected file"""
        if not QR_AVAILABLE:
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "QR Code ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            return
        
        selection = self.files_listbox.curselection()
        if not selection:
            messagebox.showwarning("‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå")
            return
        
        file_info = self.uploaded_files[selection[0]]
        self._show_qr_window(file_info)
    
    def _show_qr_window(self, file_info):
        """Show QR code window"""
        qr_window = tk.Toplevel(self.root)
        qr_window.title(f"QR Code - {file_info['name']}")
        qr_window.geometry("300x400")
        qr_window.configure(bg="white")
        
        # File info
        info_text = f"‡πÑ‡∏ü‡∏•‡πå: {file_info['name']}\n‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {file_info['folder']}\n‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {file_info['date']}"
        tk.Label(qr_window, text=info_text, bg="white", justify=tk.LEFT).pack(pady=10)
        
        # Generate QR code
        try:
            qr = qrcode.QRCode(version=1, box_size=10, border=5)
            qr.add_data(file_info['link'])
            qr.make(fit=True)
            
            qr_img = qr.make_image(fill_color="black", back_color="white")
            
            if PIL_AVAILABLE:
                qr_photo = ImageTk.PhotoImage(qr_img)
                qr_label = tk.Label(qr_window, image=qr_photo, bg="white")
                qr_label.image = qr_photo  # Keep reference
                qr_label.pack(pady=10)
            else:
                tk.Label(qr_window, text="QR Code generated\n(PIL not available for display)", bg="white").pack(pady=10)
            
        except Exception as e:
            tk.Label(qr_window, text=f"Error generating QR: {e}", bg="white").pack(pady=10)
        
        # Open button
        tk.Button(
            qr_window,
            text="üåê ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå",
            command=lambda: webbrowser.open(file_info['link']),
            bg="#3498db",
            fg="white"
        ).pack(pady=10)
    
    def run(self):
        """Run the application"""
        self.root.mainloop()

def main():
    """Main function"""
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Google Drive Manager (OAuth)...")
    
    # Create and run application
    app = DriveManagerOAuth()
    app.run()

if __name__ == "__main__":
    main() 
